@page "/skills"

<PageTitle>Skills</PageTitle>

<style>
    .skills {
    padding: 20px 5%;
    }

    .titulo {
        color: var(--mud-palette-primary);
        font-weight: bold;
    }

    .container-porcentagens {
        margin-top: 50px;
    }
</style>

<section class="skills fade-in">
    <div class="">
        <h2 class="titulo">Skills e Experiências</h2>
        <br />
        <p>
            Atualmente foco meus estudos atualmente em todo o ecossistema .NET e suas tecnologias
            para desenvolvimento de aplicações back-end como WebAPIs e microsserviços,
            frameworks fullstack como ASP.NET MVC e front-end como o blazor web assembly.
        </p>
        <p>
            Também estudo o uso de bibliotecas famosas do .NET como
            Entity Framework, Dapper e o ASP.NET Identity.
        </p>
        <p>
            Mesmo tendo facilidade para a compreensão de metodologias para desenvolvimento
            front end com blazor wasm pela familiaridade com .NET e desenvolvimento mobile
            com Xamarin.Forms e .NET MAUI, ainda possuo interesse em estudar futuramente
            tecnologias como Flutter para desenvolvimento mobile e Angular para
            desenvolvimento de aplicações dinâmicas para o front end, sendo que Angular, já possuo
            conhecimento básico, ja que estudei um pouco de seus conceitos a um tempo atrás.
        </p>
    </div>
    <div class="container-porcentagens">
        <div class="card-porcentagem">
            <small>Front End</small>
            <MudProgressLinear Color="Color.Tertiary" Value="percFrontEnd" Class="my-7" />
        </div>
        <div class="card-porcentagem">
            <small>Back End</small>
            <MudProgressLinear Color="Color.Primary" Value="percBackEnd" Class=" my-7" />
        </div>
    </div>
</section>

@code {
    private double percFrontEnd = 0.00;
    private double percBackEnd = 0.00;
    private double percFullStack = 0.00;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        while (percFrontEnd <= 50)
        {
            percFrontEnd += 1;
            StateHasChanged();
            await Task.Delay(5);
        }

        while (percBackEnd <= 75)
        {
            percBackEnd += 1;
            StateHasChanged();
            await Task.Delay(5);
        }
    }
}
